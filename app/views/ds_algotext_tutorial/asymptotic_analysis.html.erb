<!DOCTYPE html>
<head>
<title>Data Structures and Algorithms</title>
<%= stylesheet_link_tag 'ds2.scss' %>
 <center><h1>LearnOnline</h1></center>
     <center><h7>-an online study point</h7></center>
      <hr/>
</head>
<body>
<div style="background-color:#FFFFE0;height:1090px;width:300px;float:left;">
<ul>
<class>Data Structures &amp; Algorithms</class>
<li><%= link_to 'Home', dsalgo_index_path%></li>
<li><%= link_to 'Overview', dsalgo_data_structure_overview_path%></li>
<li><%= link_to 'Environment Setup', dsalgo_data_structure_environment_path%></li>
</ul>
<ul>
<class>Algorithms Contents:</class>
<li><%= link_to 'Algorithms Basics', dsalgo_algorithms_basics_path%></li>
<li><%= link_to 'Asymptotic Analysis', dsalgo_asymptotic_analysis_path%></li>
<li><%= link_to 'Greedy Algorithms', dsalgo_greedy_algorithms_path%></li>
<li><%= link_to 'Divide and Conquer', dsalgo_divide_and_conquer_path%></li>
<li><%= link_to 'Dynamic Programming', dsalgo_dynamic_programming_path%></li>
</ul>
<ul>
<class>Data Structures Contents:</class>
<li><%= link_to 'Data Structure Basics', dsalgo_data_structure_basics_path%></li>
<li><%= link_to 'Array Data Structure', dsalgo_array_data_structure_path%></li>
</ul>
<ul>
<class>Linked Lists Contents:</class>
<li><%= link_to 'Linked List Basics', dsalgo_linked_list_basics_path%></li>
<li><%= link_to 'Doubly Linked List', dsalgo_doubly_linked_list_algorithm_path%></li>
<li><%= link_to 'Circular Linked List', dsalgo_circular_linked_list_algorithm_path%></li>
</ul>
<ul>
<class>Stack and Queue Contents:</class>
<li><%= link_to 'Stack', dsalgo_stack_algorithm_path%></li>
<li><%= link_to 'Expression Parsing', dsalgo_expression_parsing_path%></li>
<li><%= link_to 'Queue', dsalgo_queue_path%></li>
</ul>
<ul>
<class>Searching Techniques:</class>
<li><%= link_to 'Linear Search', dsalgo_linear_search_algorithm_path%></li>
<li><%= link_to 'Binary Search', dsalgo_binary_search_algorithm_path%></li>
<li><%= link_to'Interpolation Search', dsalgo_interpolation_search_algorithm_path%></li>
<li><%= link_to 'Hash Table', dsalgo_hash_data_structure_path%></li>
</ul>
<ul>
<class>Sorting Techniques:</class>
<li><%= link_to 'Sorting Algorithms', dsalgo_sorting_algorithms_path%></li>
<li><%= link_to 'Bubble Sort', dsalgo_bubble_sort_algorithm_path%></li>
<li><%= link_to 'Insertion Sort', dsalgo_insertion_sort_algorithm_path%></li>
<li><%= link_to 'Selection Sort', dsalgo_selection_sort_algorithm_path%></li>
<li><%= link_to 'Merge Sort', dsalgo_merge_sort_algorithm_path%></li>
<li><%= link_to 'Shell Sort', dsalgo_shell_sort_algorithm_path%></li>
<li><%= link_to 'Quick Sort', dsalgo_quick_sort_algorithm_path%></li>
</ul>
<ul>
<class>Graphs:</class>
<li><%= link_to 'Graph Data Structure', dsalgo_graph_data_structure_path%></li>
<li><%= link_to 'Depth First Traversal', dsalgo_depth_first_traversal_path%></li>
<li><%= link_to 'Breadth First Traversal', dsalgo_breadth_first_traversal_path%></li>
</ul>
<ul>
<class>Tree:</class>
<li><%= link_to 'Tree Data Structure', dsalgo_tree_data_structure_path%></li>
<li><%= link_to 'Tree Traversal', dsalgo_tree_traversal_path%></li>
<li><%= link_to 'Binary Search Tree', dsalgo_binary_search_tree_path%></li>
<li><%= link_to 'AVL Tree', dsalgo_avl_tree_algorithm_path%></li>
<li><%= link_to 'Spanning Tree', dsalgo_spanning_tree_path%></li>
<li><%= link_to 'Heap', dsalgo_heap_data_structure_path%></li>
</ul>
<ul>
<class>Recursion</class>
<li><%= link_to 'Recursion Basics', dsalgo_recursion_basics_path%></li>
<li><%= link_to 'Tower of Hanoi', dsalgo_tower_of_hanoi_path%></li>
<li><%= link_to 'Fibonacci Series', dsalgo_fibonacci_series_path%></li>
</ul>
</div>
<div style="height:1090px;width:990px;float:right;">
<td style="text-align: right; vertical-align: top">
<div class="front-menu">
<table cellpadding="10">
<tr><td style="text-align: left">
<h4>Data Structure and Algorithms</h4>
<p>Asymptotic analysis of an algorithm refers to defining the mathematical boundation/framing of its run-time performance. Using asymptotic analysis, we can very well conclude the best case, average case, and worst case scenario of an algorithm.</p>
<p>Asymptotic analysis is input bound i.e., if there's no input to the algorithm, it is concluded to work in a constant time. Other than the "input" all other factors are considered constant.</p>
<p>Asymptotic analysis refers to computing the running time of any operation in mathematical units of computation. For example, the running time of one operation is computed as <i>f</i>(n) and may be for another operation it is computed as <i>g</i>(n<sup>2</sup>). This means the first operation running time will increase linearly with the increase in <b>n</b> and the running time of the second operation will increase exponentially when <b>n</b> increases. Similarly, the running time of both operations will be nearly the same if <b>n</b> is significantly small.</p>
<p>Usually, the time required by an algorithm falls under three types &minus;</p>
<ul>
<li><p><b>Best Case</b> &minus; Minimum time required for program execution.</p></li>
<li><p><b>Average Case</b> &minus; Average time required for program execution.</p></li>
<li><p><b>Worst Case</b> &minus; Maximum time required for program execution.</p></li>
</ul>
<h4>Asymptotic Notations</h4>
<p>Following are the commonly used asymptotic notations to calculate the running time complexity of an algorithm.</p>
<ul>
<li>&Omicron; Notation</li>
<li>&Omega; Notation</li>
<li>&theta; Notation</li>
</ul>
<h4>Big Oh Notation, &Omicron;</h4>
<p>The notation &Omicron;(n) is the formal way to express the upper bound of an algorithm's running time. It measures the worst case time complexity or the longest amount of time an algorithm can possibly take to complete.</p>
<div align = "center"><%= image_tag("big_o_notation.jpg", :alt => "Big O Notation") %></div>
<p>For example, for a function <b><i>f</i>(n)</b></p>
<h4>Omega Notation, &Omega;</h4>
<p>The notation &Omega;(n) is the formal way to express the lower bound of an algorithm's running time. It measures the best case time complexity or the best amount of time an algorithm can possibly take to complete.</p>
<div align = "center"><%= image_tag("omega_notation.jpg", :alt => "Omega Notation") %></div>
<p>For example, for a function <b><i>f</i>(n)</b></p>
<h4>Theta Notation, &theta;</h4>
<p>The notation &theta;(n) is the formal way to express both the lower bound and the upper bound of an algorithm's running time. It is represented as follows &minus;</p>
<div align = "center"><%= image_tag("theta_notation.jpg", :alt => "Theta Notation") %></div>
<h4>Common Asymptotic Notations</h4>
<p>Following is a list of some common asymptotic notations &minus;</p>
<div align="center"><table border="1" cellpadding="5" cellspacing="5" style="text-align:center;" class="table table-bordered">
<tr>
<td>constant</td>
<td>&minus;</td>
<td>&Omicron;(1)</td>
</tr>
<tr>
<td>logarithmic</td>
<td>&minus;</td>
<td>&Omicron;(log n)</td>
</tr>
<tr>
<td>linear</td>
<td>&minus;</td>
<td>&Omicron;(n)</td>
</tr>
<tr>
<td>n log n</td>
<td>&minus;</td>
<td>&Omicron;(n log n)</td>
</tr>
<tr>
<td>quadratic</td>
<td>&minus;</td>
<td>&Omicron;(n<sup>2</sup>)</td>
</tr>
<tr>
<td>cubic</td>
<td>&minus;</td>
<td>&Omicron;(n<sup>3</sup>)</td>
</tr>
<tr>
<td>polynomial</td>
<td>&minus;</td>
<td>n<sup>&Omicron;(1)</sup></td>
</tr>
<tr>
<td>exponential</td>
<td>&minus;</td>
<td>2<sup>&Omicron;(n)</sup></td>
</tr>
</table>
</div>
<hr />
</body>
</html>