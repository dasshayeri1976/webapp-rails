<!DOCTYPE html>
<html>
<head>
<title>Data Structures and Algorithms</title>
<%= stylesheet_link_tag 'ds2.scss' %>
 <center><h1>LearnOnline</h1></center>
     <center><h7>-an online study point</h7></center>
      <hr/>
</head>
<body>
<div style="background-color:#FFFFE0;height:1090px;width:300px;float:left;">
<ul>
<class>Data Structures &amp; Algorithms</class>
<li><%= link_to 'Home', dsalgo_index_path%></li>
<li><%= link_to 'Overview', dsalgo_data_structure_overview_path%></li>
<li><%= link_to 'Environment Setup', dsalgo_data_structure_environment_path%></li>
</ul>
<ul>
<class>Algorithms Contents:</class>
<li><%= link_to 'Algorithms Basics', dsalgo_algorithms_basics_path%></li>
<li><%= link_to 'Asymptotic Analysis', dsalgo_asymptotic_analysis_path%></li>
<li><%= link_to 'Greedy Algorithms', dsalgo_greedy_algorithms_path%></li>
<li><%= link_to 'Divide and Conquer', dsalgo_divide_and_conquer_path%></li>
<li><%= link_to 'Dynamic Programming', dsalgo_dynamic_programming_path%></li>
</ul>
<ul>
<class>Data Structures Contents:</class>
<li><%= link_to 'Data Structure Basics', dsalgo_data_structure_basics_path%></li>
<li><%= link_to 'Array Data Structure', dsalgo_array_data_structure_path%></li>
</ul>
<ul>
<class>Linked Lists Contents:</class>
<li><%= link_to 'Linked List Basics', dsalgo_linked_list_basics_path%></li>
<li><%= link_to 'Doubly Linked List', dsalgo_doubly_linked_list_algorithm_path%></li>
<li><%= link_to 'Circular Linked List', dsalgo_circular_linked_list_algorithm_path%></li>
</ul>
<ul>
<class>Stack and Queue Contents:</class>
<li><%= link_to 'Stack', dsalgo_stack_algorithm_path%></li>
<li><%= link_to 'Expression Parsing', dsalgo_expression_parsing_path%></li>
<li><%= link_to 'Queue', dsalgo_queue_path%></li>
</ul>
<ul>
<class>Searching Techniques:</class>
<li><%= link_to 'Linear Search', dsalgo_linear_search_algorithm_path%></li>
<li><%= link_to 'Binary Search', dsalgo_binary_search_algorithm_path%></li>
<li><%= link_to'Interpolation Search', dsalgo_interpolation_search_algorithm_path%></li>
<li><%= link_to 'Hash Table', dsalgo_hash_data_structure_path%></li>
</ul>
<ul>
<class>Sorting Techniques:</class>
<li><%= link_to 'Sorting Algorithms', dsalgo_sorting_algorithms_path%></li>
<li><%= link_to 'Bubble Sort', dsalgo_bubble_sort_algorithm_path%></li>
<li><%= link_to 'Insertion Sort', dsalgo_insertion_sort_algorithm_path%></li>
<li><%= link_to 'Selection Sort', dsalgo_selection_sort_algorithm_path%></li>
<li><%= link_to 'Merge Sort', dsalgo_merge_sort_algorithm_path%></li>
<li><%= link_to 'Shell Sort', dsalgo_shell_sort_algorithm_path%></li>
<li><%= link_to 'Quick Sort', dsalgo_quick_sort_algorithm_path%></li>
</ul>
<ul>
<class>Graphs:</class>
<li><%= link_to 'Graph Data Structure', dsalgo_graph_data_structure_path%></li>
<li><%= link_to 'Depth First Traversal', dsalgo_depth_first_traversal_path%></li>
<li><%= link_to 'Breadth First Traversal', dsalgo_breadth_first_traversal_path%></li>
</ul>
<ul>
<class>Tree:</class>
<li><%= link_to 'Tree Data Structure', dsalgo_tree_data_structure_path%></li>
<li><%= link_to 'Tree Traversal', dsalgo_tree_traversal_path%></li>
<li><%= link_to 'Binary Search Tree', dsalgo_binary_search_tree_path%></li>
<li><%= link_to 'AVL Tree', dsalgo_avl_tree_algorithm_path%></li>
<li><%= link_to 'Spanning Tree', dsalgo_spanning_tree_path%></li>
<li><%= link_to 'Heap', dsalgo_heap_data_structure_path%></li>
</ul>
<ul>
<class>Recursion</class>
<li><%= link_to 'Recursion Basics', dsalgo_recursion_basics_path%></li>
<li><%= link_to 'Tower of Hanoi', dsalgo_tower_of_hanoi_path%></li>
<li><%= link_to 'Fibonacci Series', dsalgo_fibonacci_series_path%></li>
</ul>
</div>
<div style="height:1090px;width:990px;float:right;">
<td style="text-align: right; vertical-align: top">
<div class="front-menu">
<table cellpadding="10">
<tr><td style="text-align: left">
<h4>Data Structure and Algorithms</h4>
<hr /><p>This is an in-place comparison-based sorting algorithm. Here, a sub-list is maintained which is always sorted. For example, the lower part of an array is maintained to be sorted. An element which is to be 'insert'ed in this sorted sub-list, has to find its appropriate place and then it has to be inserted there. Hence the name, <b>insertion sort</b>.</p>
<p>The array is searched sequentially and unsorted items are moved and inserted into the sorted sub-list (in the same array). This algorithm is not suitable for large data sets as its average and worst case complexity are of &Omicron;(n<sup>2</sup>), where <b>n</b> is the number of items.</p>
<h4>How Insertion Sort Works?</h4>
<p>We take an unsorted array for our example.</p>
<div align="center"><%= image_tag("insertion_sort_0.jpg", :alt => "Insertion Sort") %></div>
<p>Insertion sort compares the first two elements.</p>
<div align="center"><%= image_tag("insertion_sort_1.jpg", :alt => "Insertion Sort") %></div>
<p>It finds that both 14 and 33 are already in ascending order. For now, 14 is in sorted sub-list.</p>
<div align="center"><%= image_tag("insertion_sort_2.jpg", :alt => "Insertion Sort") %></div>
<p>Insertion sort moves ahead and compares 33 with 27.</p>
<div align="center"><%= image_tag("insertion_sort_3.jpg", :alt => "Insertion Sort") %></div>
<p>And finds that 33 is not in the correct position.</p>
<div align="center"><%= image_tag("insertion_sort_4.jpg", :alt => "Insertion Sort") %></div>
<p>It swaps 33 with 27. It also checks with all the elements of sorted sub-list. Here we see that the sorted sub-list has only one element 14, and 27 is greater than 14. Hence, the sorted sub-list remains sorted after swapping.</p>
<div align="center"><%= image_tag("insertion_sort_5.jpg", :alt => "Insertion Sort") %></div>
<p>By now we have 14 and 27 in the sorted sub-list. Next, it compares 33 with 10.</p>
<div align="center"><%= image_tag("insertion_sort_6.jpg", :alt => "Insertion Sort") %></div>
<p>These values are not in a sorted order.</p>
<div align="center"><%= image_tag("insertion_sort_7.jpg", :alt => "Insertion Sort") %></div>
<p>So we swap them.</p>
<div align="center"><%= image_tag("insertion_sort_8.jpg", :alt => "Insertion Sort") %></div>
<p>However, swapping makes 27 and 10 unsorted.</p>
<div align="center"><%= image_tag("insertion_sort_9.jpg", :alt => "Insertion Sort") %></div>
<p>Hence, we swap them too.</p>
<div align="center"><%= image_tag("insertion_sort_10.jpg", :alt => "Insertion Sort") %></div>
<p>Again we find 14 and 10 in an unsorted order.</p>
<div align="center"><%= image_tag("insertion_sort_11.jpg", :alt => "Insertion Sort") %></div>
<p>We swap them again. By the end of third iteration, we have a sorted sub-list of 4 items.</p>
<div align="center"><%= image_tag("insertion_sort_12.jpg", :alt => "Insertion Sort") %></div>
<p>This process goes on until all the unsorted values are covered in a sorted sub-list. Now we shall see some programming aspects of insertion sort.</p>   
<h4>Algorithm</h4>
<p>Now we have a bigger picture of how this sorting technique works, so we can derive simple steps by which we can achieve insertion sort.</p>
<pre>
<b>Step 1</b> &minus; If it is the first element, it is already sorted. return 1;
<b>Step 2</b> &minus; Pick next element
<b>Step 3</b> &minus; Compare with all elements in the sorted sub-list
<b>Step 4</b> &minus; Shift all the elements in the sorted sub-list that is greater than the 
         value to be sorted
<b>Step 5</b> &minus; Insert the value
<b>Step 6</b> &minus; Repeat until list is sorted
</pre>    
<h4>Pseudocode</h4>
<pre>
procedure insertionSort( A : array of items )
   int holePosition
   int valueToInsert
	
   for i = 1 to length(A) inclusive do:
	
      /* select value to be inserted */
      valueToInsert = A[i]
      holePosition = i
      
      /*locate hole position for the element to be inserted */
		
      while holePosition &gt; 0 and A[holePosition-1] &gt; valueToInsert do:
         A[holePosition] = A[holePosition-1]
         holePosition = holePosition -1
      end while
		
      /* insert the number at hole position */
      A[holePosition] = valueToInsert
      
   end for
	
end procedure
</pre> 
<hr />
</td>
</tr>
</table>
</div>
</td>
</div>
</body>
</html>