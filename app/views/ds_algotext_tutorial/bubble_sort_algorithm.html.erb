<!DOCTYPE html>
<head>
<title>Data Structures and Algorithms</title>
<%= stylesheet_link_tag 'ds2.scss' %>
 <center><h1>LearnOnline</h1></center>
     <center><h7>-an online study point</h7></center>
      <hr/>
</head>
<body>
<div style="background-color:#FFFFE0;height:1090px;width:300px;float:left;">
<ul>
<class>Data Structures &amp; Algorithms</class>
<li><%= link_to 'Home', dsalgo_index_path%></li>
<li><%= link_to 'Overview', dsalgo_data_structure_overview_path%></li>
<li><%= link_to 'Environment Setup', dsalgo_data_structure_environment_path%></li>
</ul>
<ul>
<class>Algorithms Contents:</class>
<li><%= link_to 'Algorithms Basics', dsalgo_algorithms_basics_path%></li>
<li><%= link_to 'Asymptotic Analysis', dsalgo_asymptotic_analysis_path%></li>
<li><%= link_to 'Greedy Algorithms', dsalgo_greedy_algorithms_path%></li>
<li><%= link_to 'Divide and Conquer', dsalgo_divide_and_conquer_path%></li>
<li><%= link_to 'Dynamic Programming', dsalgo_dynamic_programming_path%></li>
</ul>
<ul>
<class>Data Structures Contents:</class>
<li><%= link_to 'Data Structure Basics', dsalgo_data_structure_basics_path%></li>
<li><%= link_to 'Array Data Structure', dsalgo_array_data_structure_path%></li>
</ul>
<ul>
<class>Linked Lists Contents:</class>
<li><%= link_to 'Linked List Basics', dsalgo_linked_list_basics_path%></li>
<li><%= link_to 'Doubly Linked List', dsalgo_doubly_linked_list_algorithm_path%></li>
<li><%= link_to 'Circular Linked List', dsalgo_circular_linked_list_algorithm_path%></li>
</ul>
<ul>
<class>Stack and Queue Contents:</class>
<li><%= link_to 'Stack', dsalgo_stack_algorithm_path%></li>
<li><%= link_to 'Expression Parsing', dsalgo_expression_parsing_path%></li>
<li><%= link_to 'Queue', dsalgo_queue_path%></li>
</ul>
<ul>
<class>Searching Techniques:</class>
<li><%= link_to 'Linear Search', dsalgo_linear_search_algorithm_path%></li>
<li><%= link_to 'Binary Search', dsalgo_binary_search_algorithm_path%></li>
<li><%= link_to'Interpolation Search', dsalgo_interpolation_search_algorithm_path%></li>
<li><%= link_to 'Hash Table', dsalgo_hash_data_structure_path%></li>
</ul>
<ul>
<class>Sorting Techniques:</class>
<li><%= link_to 'Sorting Algorithms', dsalgo_sorting_algorithms_path%></li>
<li><%= link_to 'Bubble Sort', dsalgo_bubble_sort_algorithm_path%></li>
<li><%= link_to 'Insertion Sort', dsalgo_insertion_sort_algorithm_path%></li>
<li><%= link_to 'Selection Sort', dsalgo_selection_sort_algorithm_path%></li>
<li><%= link_to 'Merge Sort', dsalgo_merge_sort_algorithm_path%></li>
<li><%= link_to 'Shell Sort', dsalgo_shell_sort_algorithm_path%></li>
<li><%= link_to 'Quick Sort', dsalgo_quick_sort_algorithm_path%></li>
</ul>
<ul>
<class>Graphs:</class>
<li><%= link_to 'Graph Data Structure', dsalgo_graph_data_structure_path%></li>
<li><%= link_to 'Depth First Traversal', dsalgo_depth_first_traversal_path%></li>
<li><%= link_to 'Breadth First Traversal', dsalgo_breadth_first_traversal_path%></li>
</ul>
<ul>
<class>Tree:</class>
<li><%= link_to 'Tree Data Structure', dsalgo_tree_data_structure_path%></li>
<li><%= link_to 'Tree Traversal', dsalgo_tree_traversal_path%></li>
<li><%= link_to 'Binary Search Tree', dsalgo_binary_search_tree_path%></li>
<li><%= link_to 'AVL Tree', dsalgo_avl_tree_algorithm_path%></li>
<li><%= link_to 'Spanning Tree', dsalgo_spanning_tree_path%></li>
<li><%= link_to 'Heap', dsalgo_heap_data_structure_path%></li>
</ul>
<ul>
<class>Recursion</class>
<li><%= link_to 'Recursion Basics', dsalgo_recursion_basics_path%></li>
<li><%= link_to 'Tower of Hanoi', dsalgo_tower_of_hanoi_path%></li>
<li><%= link_to 'Fibonacci Series', dsalgo_fibonacci_series_path%></li>
</ul>
</div>
<div style="height:1090px;width:990px;float:right;">
<td style="text-align: right; vertical-align: top">
<div class="front-menu">
<table cellpadding="10">
<tr><td style="text-align: left">
<h4>Data Structure and Algorithms</h4>
<hr />
<p>Bubble sort is a simple sorting algorithm. This sorting algorithm is comparison-based algorithm in which each pair of adjacent elements is compared and the elements are swapped if they are not in order. This algorithm is not suitable for large data sets as its average and worst case complexity are of &Omicron;(n<sup>2</sup>) where <b>n</b> is the number of items.</p>
<h4>How Bubble Sort Works?</h4>
<p>We take an unsorted array for our example. Bubble sort takes &Omicron;(n<sup>2</sup>) time so we're keeping it short and precise.</p>
<div align="center"><%= image_tag("bubble_sort_0.jpg", :alt => "Bubble Sort") %></div>
<p>Bubble sort starts with very first two elements, comparing them to check which one is greater.</p>
<div align="center"><%= image_tag("bubble_sort_1.jpg", :alt => "Bubble Sort") %></div>
<p>In this case, value 33 is greater than 14, so it is already in sorted locations. Next, we compare 33 with 27.</p>
<div align="center"><%= image_tag("bubble_sort_2.jpg", :alt => "Bubble Sort") %></div>
<p>We find that 27 is smaller than 33 and these two values must be swapped.</p>
<div align="center"><%= image_tag("bubble_sort_3.jpg", :alt => "Bubble Sort") %></div>
<p>The new array should look like this &minus;</p>
<div align="center"><%= image_tag("bubble_sort_4.jpg", :alt => "Bubble Sort") %></div>
<p>Next we compare 33 and 35. We find that both are in already sorted positions.</p>
<div align="center"><%= image_tag("bubble_sort_5.jpg", :alt => "Bubble Sort") %></div>
<p>Then we move to the next two values, 35 and 10.</p>
<div align="center"><%= image_tag("bubble_sort_6.jpg", :alt => "Bubble Sort") %></div>
<p>We know then that 10 is smaller 35. Hence they are not sorted.</p>
<div align="center"><%= image_tag("bubble_sort_7.jpg", :alt => "Bubble Sort") %></div>
<p>We swap these values. We find that we have reached the end of the array. After one iteration, the array should look like this &minus;</p>
<div align="center"><%= image_tag("bubble_sort_8.jpg", :alt => "Bubble Sort") %></div>
<p>To be precise, we are now showing how an array should look like after each iteration. After the second iteration, it should look like this &minus;</p>
<div align="center"><%= image_tag("bubble_sort_9.jpg", :alt => "Bubble Sort") %></div>
<p>Notice that after each iteration, at least one value moves at the end.</p>
<div align="center"><%= image_tag("bubble_sort_10.jpg", :alt => "Bubble Sort") %></div>
<p>And when there's no swap required, bubble sorts learns that an array is completely sorted.</p>
<div align="center"><%= image_tag("bubble_sort_11.jpg", :alt => "Bubble Sort") %></div>
<p>Now we should look into some practical aspects of bubble sort.</p>
<h4>Algorithm</h4>
<p>We assume <b>list</b> is an array of <b>n</b> elements. We further assume that <b>swap</b> function swaps the values of the given array elements.</p>
<pre>
begin BubbleSort(list)

   for all elements of list
      if list[i] &gt; list[i+1]
         swap(list[i], list[i+1])
      end if
   end for
   
   return list
   
end BubbleSort
</pre> 
<h4>Pseudocode</h4>
<p>We observe in algorithm that Bubble Sort compares each pair of array element unless the whole array is completely sorted in an ascending order. This may cause a few complexity issues like what if the array needs no more swapping as all the elements are already ascending.</p>
<p>To ease-out the issue, we use one flag variable <b>swapped</b> which will help us see if any swap has happened or not. If no swap has occurred, i.e. the array requires no more processing to be sorted, it will come out of the loop.</p>
<p>Pseudocode of BubbleSort algorithm can be written as follows &minus;</p>
<pre>
procedure bubbleSort( list : array of items )

   loop = list.count;
   
   for i = 0 to loop-1 do:
      swapped = false
		
      for j = 0 to loop-1 do:
      
         /* compare the adjacent elements */   
         if list[j] &gt; list[j+1] then
            /* swap them */
            swap( list[j], list[j+1] )		 
            swapped = true
         end if
         
      end for
      
      /*if no number was swapped that means 
      array is sorted now, break the loop.*/
      
      if(not swapped) then
         break
      end if
      
   end for
   
end procedure return list
</pre> 
<h4>Implementation</h4>
<p>One more issue we did not address in our original algorithm and its improvised pseudocode, is that, after every iteration the highest values settles down at the end of the array. Hence, the next iteration need not include already sorted elements. For this purpose, in our implementation, we restrict the inner loop to avoid already sorted values.</p>
<hr />
</body>
</html>