<!DOCTYPE html>
<html>
<head>
<title>Data Structures and Algorithms</title>
<%= stylesheet_link_tag 'ds2.scss' %>
 <center><h1>LearnOnline</h1></center>
     <center><h7>-an online study point</h7></center>
      <hr/>
</head>
<body>
<div style="background-color:#FFFFE0;height:1090px;width:300px;float:left;">
<ul>
<class>Data Structures &amp; Algorithms</class>
<li><%= link_to 'Home', dsalgo_index_path%></li>
<li><%= link_to 'Overview', dsalgo_data_structure_overview_path%></li>
<li><%= link_to 'Environment Setup', dsalgo_data_structure_environment_path%></li>
</ul>
<ul>
<class>Algorithms Contents:</class>
<li><%= link_to 'Algorithms Basics', dsalgo_algorithms_basics_path%></li>
<li><%= link_to 'Asymptotic Analysis', dsalgo_asymptotic_analysis_path%></li>
<li><%= link_to 'Greedy Algorithms', dsalgo_greedy_algorithms_path%></li>
<li><%= link_to 'Divide and Conquer', dsalgo_divide_and_conquer_path%></li>
<li><%= link_to 'Dynamic Programming', dsalgo_dynamic_programming_path%></li>
</ul>
<ul>
<class>Data Structures Contents:</class>
<li><%= link_to 'Data Structure Basics', dsalgo_data_structure_basics_path%></li>
<li><%= link_to 'Array Data Structure', dsalgo_array_data_structure_path%></li>
</ul>
<ul>
<class>Linked Lists Contents:</class>
<li><%= link_to 'Linked List Basics', dsalgo_linked_list_basics_path%></li>
<li><%= link_to 'Doubly Linked List', dsalgo_doubly_linked_list_algorithm_path%></li>
<li><%= link_to 'Circular Linked List', dsalgo_circular_linked_list_algorithm_path%></li>
</ul>
<ul>
<class>Stack and Queue Contents:</class>
<li><%= link_to 'Stack', dsalgo_stack_algorithm_path%></li>
<li><%= link_to 'Expression Parsing', dsalgo_expression_parsing_path%></li>
<li><%= link_to 'Queue', dsalgo_queue_path%></li>
</ul>
<ul>
<class>Searching Techniques:</class>
<li><%= link_to 'Linear Search', dsalgo_linear_search_algorithm_path%></li>
<li><%= link_to 'Binary Search', dsalgo_binary_search_algorithm_path%></li>
<li><%= link_to'Interpolation Search', dsalgo_interpolation_search_algorithm_path%></li>
<li><%= link_to 'Hash Table', dsalgo_hash_data_structure_path%></li>
</ul>
<ul>
<class>Sorting Techniques:</class>
<li><%= link_to 'Sorting Algorithms', dsalgo_sorting_algorithms_path%></li>
<li><%= link_to 'Bubble Sort', dsalgo_bubble_sort_algorithm_path%></li>
<li><%= link_to 'Insertion Sort', dsalgo_insertion_sort_algorithm_path%></li>
<li><%= link_to 'Selection Sort', dsalgo_selection_sort_algorithm_path%></li>
<li><%= link_to 'Merge Sort', dsalgo_merge_sort_algorithm_path%></li>
<li><%= link_to 'Shell Sort', dsalgo_shell_sort_algorithm_path%></li>
<li><%= link_to 'Quick Sort', dsalgo_quick_sort_algorithm_path%></li>
</ul>
<ul>
<class>Graphs:</class>
<li><%= link_to 'Graph Data Structure', dsalgo_graph_data_structure_path%></li>
<li><%= link_to 'Depth First Traversal', dsalgo_depth_first_traversal_path%></li>
<li><%= link_to 'Breadth First Traversal', dsalgo_breadth_first_traversal_path%></li>
</ul>
<ul>
<class>Tree:</class>
<li><%= link_to 'Tree Data Structure', dsalgo_tree_data_structure_path%></li>
<li><%= link_to 'Tree Traversal', dsalgo_tree_traversal_path%></li>
<li><%= link_to 'Binary Search Tree', dsalgo_binary_search_tree_path%></li>
<li><%= link_to 'AVL Tree', dsalgo_avl_tree_algorithm_path%></li>
<li><%= link_to 'Spanning Tree', dsalgo_spanning_tree_path%></li>
<li><%= link_to 'Heap', dsalgo_heap_data_structure_path%></li>
</ul>
<ul>
<class>Recursion</class>
<li><%= link_to 'Recursion Basics', dsalgo_recursion_basics_path%></li>
<li><%= link_to 'Tower of Hanoi', dsalgo_tower_of_hanoi_path%></li>
<li><%= link_to 'Fibonacci Series', dsalgo_fibonacci_series_path%></li>
</ul>
</div>
<div style="height:1090px;width:990px;float:right;">
<td style="text-align: right; vertical-align: top">
<div class="front-menu">
<table cellpadding="10">
<tr><td style="text-align: left">
<h4>Data Structure and Algorithms</h4>
<hr />
<p>Heap is a special case of balanced binary tree data structure where the root-node key is compared with its children and arranged accordingly. If <b>&alpha;</b> has child node <b>&beta;</b> then &minus;</p>
<p>key(&alpha;) &ge; key(&beta;)</p>
<p>As the value of parent is greater than that of child, this property generates <b>Max Heap</b>. Based on this criteria, a heap can be of two types &minus;</p>
<pre>
For Input &rarr; 35 33 42 10 14 19 27 44 26 31
</pre>
<p><b>Min-Heap</b> &minus;  Where the value of the root node is less than or equal to either of its children.</p>
<%= image_tag("min_heap_example.jpg", :alt => "Min-Heap") %>
<p><b>Max-Heap</b> &minus; Where the value of the root node is greater than or equal to either of its children.</p>
<%= image_tag("max_heap_example.jpg", :alt => "Max-Heap") %>
<p>Both trees are constructed using the same input and order of arrival.</p>
<h2>Max Heap Construction Algorithm</h2>
<p>We shall use the same example to demonstrate how a Max Heap is created. The procedure to create Min Heap is similar but we go for min values instead of max values.</p>
<p>We are going to derive an algorithm for max heap by inserting one element at a time. At any point of time, heap must maintain its property. While insertion, we also assume that we are inserting a node in an already heapified tree.</p>
<pre>
<b>Step 1</b> &minus; Create a new node at the end of heap.
<b>Step 2</b> &minus; Assign new value to the node.
<b>Step 3</b> &minus; Compare the value of this child node with its parent.
<b>Step 4</b> &minus; If value of parent is less than child, then swap them.
<b>Step 5</b> &minus; Repeat step 3 &amp; 4 until Heap property holds.
</pre>
<p><b>Note</b> &minus; In Min Heap construction algorithm, we expect the value of the parent node to be less than that of the child node.</p>
<p>Let's understand Max Heap construction by an animated illustration. We consider the same input sample that we used earlier.</p>
<div align="center"><%= image_tag("max_heap_animation.gif", :alt => "Max-Heap Construction") %></div>
<h2>Max Heap Deletion Algorithm</h2>
<p>Let us derive an algorithm to delete from max heap. Deletion in Max (or Min) Heap always happens at the root to remove the Maximum (or minimum) value.</p>
<pre>
<b>Step 1</b> &minus; Remove root node.
<b>Step 2</b> &minus; Move the last element of last level to root.
<b>Step 3</b> &minus; Compare the value of this child node with its parent.
<b>Step 4</b> &minus; If value of parent is less than child, then swap them.
<b>Step 5</b> &minus; Repeat step 3 &amp; 4 until Heap property holds.
<div align="center"><%= image_tag("max_heap_deletion_animation.gif", :alt => "Max-Heap Deletion") %></div>
</pre>
<hr />
</td>
</tr>
</table>
</div>
</td>
</div>
</body>
</html>