<!DOCTYPE html>
<html>
<head>
<title>Data Structures and Algorithms</title>
<%= stylesheet_link_tag 'ds2.scss' %>
 <center><h1>LearnOnline</h1></center>
     <center><h7>-an online study point</h7></center>
      <hr/>
</head>
<body>
<div style="background-color:#FFFFE0;height:1090px;width:300px;float:left;">
<ul>
<class>Data Structures &amp; Algorithms</class>
<li><%= link_to 'Home', dsalgo_index_path%></li>
<li><%= link_to 'Overview', dsalgo_data_structure_overview_path%></li>
<li><%= link_to 'Environment Setup', dsalgo_data_structure_environment_path%></li>
</ul>
<ul>
<class>Algorithms Contents:</class>
<li><%= link_to 'Algorithms Basics', dsalgo_algorithms_basics_path%></li>
<li><%= link_to 'Asymptotic Analysis', dsalgo_asymptotic_analysis_path%></li>
<li><%= link_to 'Greedy Algorithms', dsalgo_greedy_algorithms_path%></li>
<li><%= link_to 'Divide and Conquer', dsalgo_divide_and_conquer_path%></li>
<li><%= link_to 'Dynamic Programming', dsalgo_dynamic_programming_path%></li>
</ul>
<ul>
<class>Data Structures Contents:</class>
<li><%= link_to 'Data Structure Basics', dsalgo_data_structure_basics_path%></li>
<li><%= link_to 'Array Data Structure', dsalgo_array_data_structure_path%></li>
</ul>
<ul>
<class>Linked Lists Contents:</class>
<li><%= link_to 'Linked List Basics', dsalgo_linked_list_basics_path%></li>
<li><%= link_to 'Doubly Linked List', dsalgo_doubly_linked_list_algorithm_path%></li>
<li><%= link_to 'Circular Linked List', dsalgo_circular_linked_list_algorithm_path%></li>
</ul>
<ul>
<class>Stack and Queue Contents:</class>
<li><%= link_to 'Stack', dsalgo_stack_algorithm_path%></li>
<li><%= link_to 'Expression Parsing', dsalgo_expression_parsing_path%></li>
<li><%= link_to 'Queue', dsalgo_queue_path%></li>
</ul>
<ul>
<class>Searching Techniques:</class>
<li><%= link_to 'Linear Search', dsalgo_linear_search_algorithm_path%></li>
<li><%= link_to 'Binary Search', dsalgo_binary_search_algorithm_path%></li>
<li><%= link_to'Interpolation Search', dsalgo_interpolation_search_algorithm_path%></li>
<li><%= link_to 'Hash Table', dsalgo_hash_data_structure_path%></li>
</ul>
<ul>
<class>Sorting Techniques:</class>
<li><%= link_to 'Sorting Algorithms', dsalgo_sorting_algorithms_path%></li>
<li><%= link_to 'Bubble Sort', dsalgo_bubble_sort_algorithm_path%></li>
<li><%= link_to 'Insertion Sort', dsalgo_insertion_sort_algorithm_path%></li>
<li><%= link_to 'Selection Sort', dsalgo_selection_sort_algorithm_path%></li>
<li><%= link_to 'Merge Sort', dsalgo_merge_sort_algorithm_path%></li>
<li><%= link_to 'Shell Sort', dsalgo_shell_sort_algorithm_path%></li>
<li><%= link_to 'Quick Sort', dsalgo_quick_sort_algorithm_path%></li>
</ul>
<ul>
<class>Graphs:</class>
<li><%= link_to 'Graph Data Structure', dsalgo_graph_data_structure_path%></li>
<li><%= link_to 'Depth First Traversal', dsalgo_depth_first_traversal_path%></li>
<li><%= link_to 'Breadth First Traversal', dsalgo_breadth_first_traversal_path%></li>
</ul>
<ul>
<class>Tree:</class>
<li><%= link_to 'Tree Data Structure', dsalgo_tree_data_structure_path%></li>
<li><%= link_to 'Tree Traversal', dsalgo_tree_traversal_path%></li>
<li><%= link_to 'Binary Search Tree', dsalgo_binary_search_tree_path%></li>
<li><%= link_to 'AVL Tree', dsalgo_avl_tree_algorithm_path%></li>
<li><%= link_to 'Spanning Tree', dsalgo_spanning_tree_path%></li>
<li><%= link_to 'Heap', dsalgo_heap_data_structure_path%></li>
</ul>
<ul>
<class>Recursion</class>
<li><%= link_to 'Recursion Basics', dsalgo_recursion_basics_path%></li>
<li><%= link_to 'Tower of Hanoi', dsalgo_tower_of_hanoi_path%></li>
<li><%= link_to 'Fibonacci Series', dsalgo_fibonacci_series_path%></li>
</ul>
</div>
<div style="height:1090px;width:990px;float:right;">
<td style="text-align: right; vertical-align: top">
<div class="front-menu">
<table cellpadding="10">
<tr><td style="text-align: left">
<h4>Data Structure and Algorithms</h4>
<hr />
<p>Traversal is a process to visit all the nodes of a tree and may print their values too. Because, all nodes are connected via edges (links) we always start from the root (head) node. That is, we cannot randomly access a node in a tree. There are three ways which we use to traverse a tree &minus;</p>
<ul>
<li>In-order Traversal</li>
<li>Pre-order Traversal</li>
<li>Post-order Traversal</li>
</ul>
<p>Generally, we traverse a tree to search or locate a given item or key in the tree or to print all the values it contains.</p>
<h2>In-order Traversal</h2>
<p>In this traversal method, the left subtree is visited first, then the root and later the right sub-tree. We should always remember that every node may represent a subtree itself.</p>
<p>If a binary tree is traversed <b>in-order</b>, the output will produce sorted key values in an ascending order.</p>
<div align="center"><%= image_tag("inorder_traversal.jpg", :alt => "Inorder Traversal") %></div>
<p>We start from <b>A</b>, and following in-order traversal, we move to its left subtree <b>B</b>. <b>B</b> is also traversed in-order. The process goes on until all the nodes are visited. The output of inorder traversal of this tree will be &minus;</p>
<p><b><i>D &rarr; B &rarr; E &rarr; A &rarr; F &rarr; C &rarr; G</i></b></p>
<h3>Algorithm</h3>
<pre>
Until all nodes are traversed &minus;
<b>Step 1</b> &minus; Recursively traverse left subtree.
<b>Step 2</b> &minus; Visit root node.
<b>Step 3</b> &minus; Recursively traverse right subtree.
</pre>
<h2>Pre-order Traversal</h2>
<p>In this traversal method, the root node is visited first, then the left subtree and finally the right subtree.</p>
<div align="center"><%= image_tag("preorder_traversal.jpg", :alt => "Preorder Traversal") %></div>
<p>We start from <b>A</b>, and following pre-order traversal, we first visit <b>A</b> itself and then move to its left subtree <b>B</b>. <b>B</b> is also traversed pre-order. The process goes on until all the nodes are visited. The output of pre-order traversal of this tree will be &minus;</p>
<p><b><i>A &rarr; B &rarr; D &rarr; E &rarr; C &rarr; F &rarr; G</i></b></p>
<h3>Algorithm</h3>
<pre>
Until all nodes are traversed &minus;
<b>Step 1</b> &minus; Visit root node.
<b>Step 2</b> &minus; Recursively traverse left subtree.
<b>Step 3</b> &minus; Recursively traverse right subtree.
</pre>
<h2>Post-order Traversal</h2>
<p>In this traversal method, the root node is visited last, hence the name. First we traverse the left subtree, then the right subtree and finally the root node.</p>
<div align="center"><%= image_tag("postorder_traversal.jpg", :alt => "Postorder Traversal") %></div>
<p>We start from <b>A</b>, and following pre-order traversal, we first visit the left subtree <b>B</b>. <b>B</b> is also traversed post-order. The process goes on until all the nodes are visited. The output of post-order traversal of this tree will be &minus;</p>
<p><b><i>D &rarr; E &rarr; B &rarr; F &rarr; G &rarr; C &rarr; A</i></b></p>
<h3>Algorithm</h3>
<pre>
Until all nodes are traversed &minus;
<b>Step 1</b> &minus; Recursively traverse left subtree.
<b>Step 2</b> &minus; Recursively traverse right subtree.
<b>Step 3</b> &minus; Visit root node.
</pre>
<hr />
</body>
</html>