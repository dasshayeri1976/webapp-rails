<!DOCTYPE html>
<html>
<head>
<title>Data Structures and Algorithms</title>
<%= stylesheet_link_tag 'ds2.scss' %>
 <center><h1>LearnOnline</h1></center>
     <center><h7>-an online study point</h7></center>
      <hr/>
</head>
<body>
<div style="background-color:#FFFFE0;height:1090px;width:300px;float:left;">
<ul>
<class>Data Structures &amp; Algorithms</class>
<li><%= link_to 'Home', dsalgo_index_path%></li>
<li><%= link_to 'Overview', dsalgo_data_structure_overview_path%></li>
<li><%= link_to 'Environment Setup', dsalgo_data_structure_environment_path%></li>
</ul>
<ul>
<class>Algorithms Contents:</class>
<li><%= link_to 'Algorithms Basics', dsalgo_algorithms_basics_path%></li>
<li><%= link_to 'Asymptotic Analysis', dsalgo_asymptotic_analysis_path%></li>
<li><%= link_to 'Greedy Algorithms', dsalgo_greedy_algorithms_path%></li>
<li><%= link_to 'Divide and Conquer', dsalgo_divide_and_conquer_path%></li>
<li><%= link_to 'Dynamic Programming', dsalgo_dynamic_programming_path%></li>
</ul>
<ul>
<class>Data Structures Contents:</class>
<li><%= link_to 'Data Structure Basics', dsalgo_data_structure_basics_path%></li>
<li><%= link_to 'Array Data Structure', dsalgo_array_data_structure_path%></li>
</ul>
<ul>
<class>Linked Lists Contents:</class>
<li><%= link_to 'Linked List Basics', dsalgo_linked_list_basics_path%></li>
<li><%= link_to 'Doubly Linked List', dsalgo_doubly_linked_list_algorithm_path%></li>
<li><%= link_to 'Circular Linked List', dsalgo_circular_linked_list_algorithm_path%></li>
</ul>
<ul>
<class>Stack and Queue Contents:</class>
<li><%= link_to 'Stack', dsalgo_stack_algorithm_path%></li>
<li><%= link_to 'Expression Parsing', dsalgo_expression_parsing_path%></li>
<li><%= link_to 'Queue', dsalgo_queue_path%></li>
</ul>
<ul>
<class>Searching Techniques:</class>
<li><%= link_to 'Linear Search', dsalgo_linear_search_algorithm_path%></li>
<li><%= link_to 'Binary Search', dsalgo_binary_search_algorithm_path%></li>
<li><%= link_to'Interpolation Search', dsalgo_interpolation_search_algorithm_path%></li>
<li><%= link_to 'Hash Table', dsalgo_hash_data_structure_path%></li>
</ul>
<ul>
<class>Sorting Techniques:</class>
<li><%= link_to 'Sorting Algorithms', dsalgo_sorting_algorithms_path%></li>
<li><%= link_to 'Bubble Sort', dsalgo_bubble_sort_algorithm_path%></li>
<li><%= link_to 'Insertion Sort', dsalgo_insertion_sort_algorithm_path%></li>
<li><%= link_to 'Selection Sort', dsalgo_selection_sort_algorithm_path%></li>
<li><%= link_to 'Merge Sort', dsalgo_merge_sort_algorithm_path%></li>
<li><%= link_to 'Shell Sort', dsalgo_shell_sort_algorithm_path%></li>
<li><%= link_to 'Quick Sort', dsalgo_quick_sort_algorithm_path%></li>
</ul>
<ul>
<class>Graphs:</class>
<li><%= link_to 'Graph Data Structure', dsalgo_graph_data_structure_path%></li>
<li><%= link_to 'Depth First Traversal', dsalgo_depth_first_traversal_path%></li>
<li><%= link_to 'Breadth First Traversal', dsalgo_breadth_first_traversal_path%></li>
</ul>
<ul>
<class>Tree:</class>
<li><%= link_to 'Tree Data Structure', dsalgo_tree_data_structure_path%></li>
<li><%= link_to 'Tree Traversal', dsalgo_tree_traversal_path%></li>
<li><%= link_to 'Binary Search Tree', dsalgo_binary_search_tree_path%></li>
<li><%= link_to 'AVL Tree', dsalgo_avl_tree_algorithm_path%></li>
<li><%= link_to 'Spanning Tree', dsalgo_spanning_tree_path%></li>
<li><%= link_to 'Heap', dsalgo_heap_data_structure_path%></li>
</ul>
<ul>
<class>Recursion</class>
<li><%= link_to 'Recursion Basics', dsalgo_recursion_basics_path%></li>
<li><%= link_to 'Tower of Hanoi', dsalgo_tower_of_hanoi_path%></li>
<li><%= link_to 'Fibonacci Series', dsalgo_fibonacci_series_path%></li>
</ul>
<div style="height:1090px;width:990px;float:right;">
<td style="text-align: right; vertical-align: top">
<div class="front-menu">
<table cellpadding="10">
<tr><td style="text-align: left">
<h4>Data Structure and Algorithms</h4>
<p>Data Structure is a systematic way to organize data in order to use it efficiently. Following terms are the foundation terms of a data structure.</p>
<ul>
<li><p><b>Interface</b> &minus; Each data structure has an interface. Interface represents the set of operations that a data structure supports. An interface only provides the list of supported operations, type of parameters they can accept and return type of these operations.</p></li>
<li><p><b>Implementation</b> &minus; Implementation provides the internal representation of a data structure. Implementation also provides the definition of the algorithms used in the operations of the data structure.</p></li>
</ul>
<h4>Characteristics of a Data Structure</h4>
<ul>
<li><p><b>Correctness</b> &minus; Data structure implementation should implement its interface correctly.</p></li>
<li><p><b>Time Complexity</b> &minus; Running time or the execution time of operations of data structure must be as small as possible.</p></li>
<li><p><b>Space Complexity</b> &minus; Memory usage of a data structure operation should be as little as possible.</p></li>
</ul>
<h4>Need for Data Structure</h4>
<p>As applications are getting complex and data rich, there are three common problems that applications face now-a-days.</p>
<ul>
<li><p><b>Data Search</b> &minus; Consider an inventory of 1 million(10<sup>6</sup>) items of a store. If the application is to search an item, it has to search an item in 1 million(10<sup>6</sup>) items every time slowing down the search. As data grows, search will become slower.</p></li>
<li><p><b>Processor speed</b> &minus; Processor speed although being very high, falls limited if the data grows to billion records.</p></li>
<li><p><b>Multiple requests</b> &minus; As thousands of users can search data simultaneously on a web server, even the fast server fails while searching the data.</p></li>
</ul>
<p>To solve the above-mentioned problems, data structures come to rescue. Data can be organized in a data structure in such a way that all items may not be required to be searched, and the required data can be searched almost instantly.</p>
<h4>Execution Time Cases</h4>
<p>There are three cases which are usually used to compare various data structure's execution time in a relative manner.</p>
<ul>
<li><p><b>Worst Case</b> &minus; This is the scenario where a particular data structure operation takes maximum time it can take. If an operation's worst case time is &#402;(n) then this operation will not take more than &#402;(n) time where &#402;(n) represents function of n.</p></li>
<li><p><b>Average Case</b> &minus; This is the scenario depicting the average execution time of an operation of a data structure. If an operation takes &#402;(n) time in execution, then m operations will take m&#402;(n) time.</p></li>
<li><p><b>Best Case</b> &minus; This is the scenario depicting the least possible execution time of an operation of a data structure. If an operation takes &#402;(n) time in execution, then the actual operation may take time as the random number which would be maximum as &#402;(n).</p></li>
</ul>
<h4>Basic Terminology</h4>
<ul class="list">
<li><p><b>Data</b> &minus; Data are values or set of values.</p></li> 
<li><p><b>Data Item</b> &minus; Data item refers to single unit of values.</p></li>
<li><p><b>Group Items</b> &minus; Data items that are divided into sub items are called as Group Items.</p></li>
<li><p><b>Elementary Items</b> &minus; Data items that cannot be divided are called as Elementary Items.</p></li>
<li><p><b>Attribute and Entity</b> &minus; An entity is that which contains certain attributes or properties, which may be assigned values.</p></li>
<li><p><b>Entity Set</b> &minus; Entities of similar attributes form an entity set.</p></li>
<li><p><b>Field</b> &minus; Field is a single elementary unit of information representing an attribute of an entity.</p></li>
<li><p><b>Record</b> &minus; Record is a collection of field values of a given entity.</p></li>
<li><p><b>File</b> &minus; File is a collection of records of the entities in a given entity set.</p></li>
</ul>
<hr />
</td>
</tr>
</table>
</div>
</td>
</div>
</div>
</body>
</html>